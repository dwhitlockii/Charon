---
description: 
globs: 
alwaysApply: false
---
# **Phase Rules & Guidelines (Strict)**

## **Phase 1: Codebase Exploration & Understanding**
MustDo:
  - Identify **all** directories, modules, and dependencies.
  - Document **every** key component, framework, and external service.
  - Log **every API endpoint, database model, and major function.**
  
Prohibited:
  - Skipping documentation of minor modules or dependencies.
  - Making assumptions without **tracing the actual execution flow.**
  - Proceeding without **a fully mapped-out system architecture.**

## **Phase 2: Deep Technical Analysis**
MustDo:
  - Evaluate **every** function and module for clarity and efficiency.
  - Log **all** security risks, performance issues, and architectural flaws.
  - Maintain **comprehensive scoring** to quantify quality issues.

Prohibited:
  - Analyzing code without **logging exact problem locations and causes.**
  - Making subjective judgments **without measurable evidence.**
  - Overlooking minor inefficiencies **that may compound over time.**

## **Phase 3: Strengths & Weaknesses Identification**
MustDo:
  - Catalog **strong points** (e.g., well-structured functions, modular design).
  - Identify **code smells, anti-patterns, and scalability concerns.**
  - Rank issues based on **severity and potential impact.**

Prohibited:
  - Listing strengths/weaknesses **without justification or evidence.**
  - Suggesting premature optimizations **without assessing business impact.**
  - Ignoring **hidden dependencies that may introduce technical debt.**

## **Phase 4: Refactoring Strategy Development**
MustDo:
  - Provide **precise** step-by-step solutions **for every issue.**
  - Prioritize fixes **based on security, performance, and maintainability.**
  - Define **clear success metrics** for each change.

Prohibited:
  - Recommending drastic rewrites **unless absolutely necessary.**
  - Suggesting fixes **without explaining potential side effects.**
  - Implementing solutions **without verifying correctness.**

## **Phase 5: Documentation & Communication**
MustDo:
  - Maintain **detailed, continuously updated documentation.**
  - Log **all** modifications, including reasoning and expected outcomes.
  - Ensure all changes **are properly reviewed and tested.**

Prohibited:
  - Making undocumented changes.
  - Providing incomplete or vague reports.
  - Allowing outdated documentation **to persist beyond a refactor.**

---

# **Cursor AI-Specific Behavior Rules**

- **Always provide a complete and fully structured response.**
- **Never skip documentation updates, even for minor changes.**
- **Every recommendation must be backed by code samples and analysis.**
- **Ensure documentation is version-controlled and audit-ready.**
- **All feedback must be actionable, technically sound, and justified.**
- **Partial analysis or incomplete evaluations are strictly prohibited.**

---

# **Final Implementation Plan**

- **Enforce a structured, thorough review for every codebase.**
- **Ensure all documentation is continuously updated.**
- **Prioritize high-impact areas and avoid unnecessary rewrites.**
- **Maintain strict consistency in evaluation, recommendations, and reporting.**
- **Apply robust tracking and validation for all refactoring efforts.**

---

## **Additional Workflow Guidelines**

### **1. Incremental Development & Testing**
MustDo:
  - Develop code in **small, incremental changes** to ensure manageable versions.
  - After every major change, **immediately run tests** to validate functionality.
  - Track and fix bugs **as soon as they appear**, preventing backlogs.
  
Prohibited:
  - Making large-scale changes without **testing in intervals**.
  - Allowing bugs to stack up before addressing them.

### **2. Automated Code Linting and Formatting**
MustDo:
  - Integrate automated **code linting** and **formatting tools** (e.g., ESLint, Flake8, Prettier) to ensure consistency.
  - Run linting tools **automatically** as part of the CI/CD pipeline.

Prohibited:
  - Committing code without passing **linting or formatting standards**.

### **3. Effective Use of Version Control**
MustDo:
  - Use **Git** (or other version control) for all code changes.
  - Commit frequently with **clear, concise messages** reflecting the change's purpose.
  - Use **feature branches** for isolated development.
  - Ensure **pull requests** are reviewed before merging.

Prohibited:
  - Committing large chunks without breaking them into manageable pieces.
  - Pushing unreviewed code directly to the **main branch**.

### **4. Proper Use of Comments and Inline Documentation**
MustDo:
  - Add **meaningful comments** and **inline documentation** to complex sections of code.
  - Comments should describe **why** something is done, not just **what**.

Prohibited:
  - Leaving code **without comments** where the logic is unclear.

### **5. Task Breakdown & Prioritization**
MustDo:
  - Break tasks into **small, manageable units** with clear objectives.
  - Prioritize based on **business impact, security, and criticality**.

Prohibited:
  - Taking on large tasks without breaking them down into actionable steps.

### **6. Focus on Reusability and Modularity**
MustDo:
  - Develop code to be **modular** and **reusable**.
  - Design functions and components to be **independent**, promoting **decoupling** and **enhancing testability**.

Prohibited:
  - Writing "spaghetti code" that mixes multiple concerns into a single module.

### **7. User-Centered Development and Interface Design**
MustDo:
  - Focus on **usability** when developing user-facing features.
  - Use **wireframes** and mockups to guide design decisions.

Prohibited:
  - Skipping user experience design for **front-end features**.

### **8. Real-Time Collaboration and Communication**
MustDo:
  - **Collaborate and communicate** regularly with team members or stakeholders.
  - Use collaboration tools (e.g., Slack, Zoom, Microsoft Teams).

Prohibited:
  - Working in isolation without **checking in with teammates**.

### **9. Code Reviews & Pair Programming**
MustDo:
  - Implement a **structured code review process** for every pull request.
  - Encourage **pair programming** to share knowledge and improve code quality.

Prohibited:
  - Merging **unreviewed code** or skipping the review process.

### **10. Monitoring and Analytics**
MustDo:
  - Implement monitoring and analytics tools (e.g., Prometheus, Grafana).
  - Set up **automated alerts** for performance issues and downtime.

Prohibited:
  - Launching code without **monitoring and alerts** in place.

### **11. End-to-End Integration**
MustDo:
  - Ensure full **integration** between front-end, back-end, and database systems.
  - Perform **integration testing** before deploying to production.

Prohibited:
  - Developing parts of the system without planning for **integration**.

### **12. Continuous Learning and Improvement**
MustDo:
  - Regularly review and **refactor code** to keep it up to date with current best practices.
  - Encourage **knowledge sharing** within the team.

Prohibited:
  - Allowing outdated patterns or technologies to remain in the codebase.

---

## **Strict Compliance Policy**
FailureToComply:
  - Incomplete code reviews will be **rejected**.
  - Refactoring suggestions **not documented properly** will be disregarded.
  - Any **undocumented change** will be treated as a failure.

StrictAdherence:
  - Ensures **high-quality code analysis** and maintainable, scalable improvements.

